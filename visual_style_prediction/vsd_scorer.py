#!/usr/bin/env python3
"""
Visual Style Dominance (VSD) Score Calculator

This script calculates the Visual Style Dominance (VSD) Score for different TTI models across historical periods.
The VSD Score quantifies a model's bias toward a given visual style for a particular historical period.

Formula: VSD(m, t) = max_s P_m(s | t)
Where:
- m: TTI model
- t: historical period
- s: visual style
- P_m(s | t): proportion of images generated by model m for period t classified as style s

Usage:
python vsd_scorer.py --predictions style_predictions.csv --output vsd_results.csv
"""

import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


def calculate_vsd_scores(df):
    """
    Calculate Visual Style Dominance (VSD) scores for each model and historical period.
    
    Args:
        df: DataFrame containing style predictions with 'model', 'historical_period', and 'detailed_style' columns
        
    Returns:
        DataFrame with VSD scores and dominant styles for each model and period
    """
    # Ensure required columns exist
    required_cols = ['model', 'historical_period', 'detailed_style']
    for col in required_cols:
        if col not in df.columns:
            raise ValueError(f"Required column '{col}' not found in predictions file")
    
    # Group by model and historical period
    results = []
    
    # Get all unique models and periods
    models = df['model'].unique()
    periods = df['historical_period'].unique()
    
    for model in models:
        model_df = df[df['model'] == model]
        
        for period in periods:
            period_df = model_df[model_df['historical_period'] == period]
            
            # Skip if no images for this combination
            if len(period_df) == 0:
                continue
            
            # Calculate style distribution for this model and period
            style_counts = period_df['detailed_style'].value_counts()
            style_proportions = style_counts / len(period_df)
            
            # VSD is the maximum proportion (dominant style)
            vsd_score = style_proportions.max() if len(style_proportions) > 0 else 0
            dominant_style = style_proportions.idxmax() if len(style_proportions) > 0 else "N/A"
            
            # Store all style proportions for detailed analysis
            style_distribution = {style: prop for style, prop in style_proportions.items()}
            
            # Calculate style diversity (number of styles with proportion > threshold)
            diversity_threshold = 0.05  # Styles with at least 5% representation
            style_diversity = sum(1 for prop in style_proportions if prop > diversity_threshold)
            
            # Add to results
            results.append({
                'model': model,
                'historical_period': period,
                'sample_size': len(period_df),
                'vsd_score': vsd_score,
                'dominant_style': dominant_style,
                'style_diversity': style_diversity,
                'style_distribution': style_distribution
            })
    
    return pd.DataFrame(results)


def analyze_vsd_results(vsd_df):
    """
    Generate summary statistics and insights from VSD results.
    
    Args:
        vsd_df: DataFrame with VSD scores
        
    Returns:
        Dict containing various analyses
    """
    analysis = {}
    
    # Overall VSD score statistics
    analysis['overall_vsd_stats'] = {
        'mean': vsd_df['vsd_score'].mean(),
        'median': vsd_df['vsd_score'].median(),
        'min': vsd_df['vsd_score'].min(),
        'max': vsd_df['vsd_score'].max()
    }
    
    # Model with highest average VSD (most stylistically biased)
    model_avg_vsd = vsd_df.groupby('model')['vsd_score'].mean().sort_values(ascending=False)
    analysis['model_vsd_rankings'] = model_avg_vsd.to_dict()
    
    # Historical period with highest average VSD (most constrained by style)
    period_avg_vsd = vsd_df.groupby('historical_period')['vsd_score'].mean().sort_values(ascending=False)
    analysis['period_vsd_rankings'] = period_avg_vsd.to_dict()
    
    # Model-period combination with highest VSD (most extreme stylistic bias)
    max_vsd_idx = vsd_df['vsd_score'].idxmax()
    analysis['most_biased_combination'] = vsd_df.iloc[max_vsd_idx][['model', 'historical_period', 'vsd_score', 'dominant_style']].to_dict()
    
    # Model-period combination with lowest VSD (most stylistic diversity)
    min_vsd_idx = vsd_df['vsd_score'].idxmin()
    analysis['least_biased_combination'] = vsd_df.iloc[min_vsd_idx][['model', 'historical_period', 'vsd_score', 'dominant_style']].to_dict()
    
    return analysis


def generate_visualizations(vsd_df, output_prefix):
    """
    Generate visualizations for VSD scores.
    
    Args:
        vsd_df: DataFrame with VSD scores
        output_prefix: Prefix for output filenames
    """
    # Set plotting style
    sns.set(style="whitegrid")
    plt.figure(figsize=(12, 8))
    
    # 1. Heatmap of VSD scores across models and periods
    plt.figure(figsize=(14, 10))
    vsd_pivot = vsd_df.pivot_table(index='model', columns='historical_period', values='vsd_score')
    
    # Plot heatmap
    sns.heatmap(vsd_pivot, annot=True, cmap='YlOrRd', vmin=0, vmax=1, 
                linewidths=0.5, fmt='.2f', cbar_kws={'label': 'VSD Score'})
    plt.title('Visual Style Dominance (VSD) Scores by Model and Historical Period', fontsize=14)
    plt.tight_layout()
    plt.savefig(f"{output_prefix}_vsd_heatmap.png", dpi=300)
    plt.close()
    
    # 2. Bar chart of average VSD scores by model
    plt.figure(figsize=(12, 6))
    model_avg_vsd = vsd_df.groupby('model')['vsd_score'].mean().sort_values(ascending=False)
    sns.barplot(x=model_avg_vsd.index, y=model_avg_vsd.values)
    plt.title('Average VSD Score by Model', fontsize=14)
    plt.ylabel('Average VSD Score')
    plt.xlabel('Model')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(f"{output_prefix}_model_vsd_scores.png", dpi=300)
    plt.close()
    
    # 3. Bar chart of average VSD scores by historical period
    plt.figure(figsize=(12, 6))
    period_avg_vsd = vsd_df.groupby('historical_period')['vsd_score'].mean().sort_values(ascending=False)
    sns.barplot(x=period_avg_vsd.index, y=period_avg_vsd.values)
    plt.title('Average VSD Score by Historical Period', fontsize=14)
    plt.ylabel('Average VSD Score')
    plt.xlabel('Historical Period')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig(f"{output_prefix}_period_vsd_scores.png", dpi=300)
    plt.close()


def main():
    parser = argparse.ArgumentParser(description="Calculate Visual Style Dominance (VSD) scores")
    
    # Input/output options
    parser.add_argument("--predictions", required=True, help="Path to the style predictions CSV file")
    parser.add_argument("--output", default="vsd_results.csv", help="Path to save VSD results CSV")
    parser.add_argument("--visualize", action="store_true", help="Generate visualizations")
    parser.add_argument("--output-prefix", default="vsd", help="Prefix for visualization filenames")
    
    args = parser.parse_args()
    
    # Load predictions
    print(f"Loading style predictions from {args.predictions}...")
    df = pd.read_csv(args.predictions)
    
    # Calculate VSD scores
    print("Calculating VSD scores...")
    vsd_df = calculate_vsd_scores(df)
    
    # Save results
    print(f"Saving VSD results to {args.output}...")
    
    # Convert style_distribution dictionary to string for CSV storage
    vsd_df['style_distribution'] = vsd_df['style_distribution'].apply(lambda x: str(x))
    vsd_df.to_csv(args.output, index=False)
    
    # Generate summary analysis
    print("Analyzing VSD results...")
    analysis = analyze_vsd_results(vsd_df)
    
    # Print summary report
    print("\n=== VISUAL STYLE DOMINANCE (VSD) ANALYSIS ===")
    print(f"\nOverall VSD Statistics:")
    print(f"  Mean VSD Score: {analysis['overall_vsd_stats']['mean']:.3f}")
    print(f"  Median VSD Score: {analysis['overall_vsd_stats']['median']:.3f}")
    print(f"  Range: {analysis['overall_vsd_stats']['min']:.3f} to {analysis['overall_vsd_stats']['max']:.3f}")
    
    print("\nModels Ranked by Average VSD Score (Higher = More Stylistically Biased):")
    for i, (model, score) in enumerate(analysis['model_vsd_rankings'].items(), 1):
        print(f"  {i}. {model}: {score:.3f}")
    
    print("\nHistorical Periods Ranked by Average VSD Score (Higher = More Stylistically Constrained):")
    for i, (period, score) in enumerate(analysis['period_vsd_rankings'].items(), 1):
        print(f"  {i}. {period}: {score:.3f}")
    
    print("\nMost Stylistically Biased Model-Period Combination:")
    most_biased = analysis['most_biased_combination']
    print(f"  Model: {most_biased['model']}")
    print(f"  Period: {most_biased['historical_period']}")
    print(f"  VSD Score: {most_biased['vsd_score']:.3f}")
    print(f"  Dominant Style: {most_biased['dominant_style']}")
    
    print("\nMost Stylistically Diverse Model-Period Combination:")
    least_biased = analysis['least_biased_combination']
    print(f"  Model: {least_biased['model']}")
    print(f"  Period: {least_biased['historical_period']}")
    print(f"  VSD Score: {least_biased['vsd_score']:.3f}")
    print(f"  Dominant Style: {least_biased['dominant_style']}")
    
    # Generate visualizations if requested
    if args.visualize:
        print("\nGenerating visualizations...")
        generate_visualizations(vsd_df, args.output_prefix)
        print(f"Visualizations saved with prefix: {args.output_prefix}")

    print("\nDone!")


if __name__ == "__main__":
